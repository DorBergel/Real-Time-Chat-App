# Real-Time Chat App Backend API

## Base URL
`http://<your-server-domain>/api`

## Endpoints

### 1. User Authentication
#### POST `/auth/register`
- **Description**: Register a new user.
- **Request Body**:
    ```json
    {
        "username": "string",
        "password": "string"
    }
    ```
- **Response**:
    - `201 Created`: User registered successfully.
    - `400 Bad Request`: Validation error.

#### POST `/auth/login`
- **Description**: Log in an existing user.
- **Request Body**:
    ```json
    {
        "username": "string",
        "password": "string"
    }
    ```
- **Response**:
    - `200 OK`: Returns a JWT token.
    - `401 Unauthorized`: Invalid credentials.

---

### 2. Chat Rooms
#### GET `/rooms`
- **Description**: Get a list of all chat rooms.
- **Response**:
    - `200 OK`: Returns an array of chat rooms.

#### POST `/rooms`
- **Description**: Create a new chat room.
- **Request Body**:
    ```json
    {
        "name": "string"
    }
    ```
- **Response**:
    - `201 Created`: Chat room created successfully.
    - `400 Bad Request`: Validation error.

---

### 3. Messages
#### GET `/rooms/:roomId/messages`
- **Description**: Get all messages in a specific chat room.
- **Response**:
    - `200 OK`: Returns an array of messages.

#### POST `/rooms/:roomId/messages`
- **Description**: Send a new message to a chat room.
- **Request Body**:
    ```json
    {
        "sender": "string",
        "content": "string"
    }
    ```
- **Response**:
    - `201 Created`: Message sent successfully.
    - `400 Bad Request`: Validation error.

---

### 4. WebSocket
- **Description**: Real-time communication is handled via WebSocket.
- **Events**:
    - `message`: Broadcasts a new message to all clients in a room.
    - `join`: Notifies when a user joins a room.
    - `leave`: Notifies when a user leaves a room.