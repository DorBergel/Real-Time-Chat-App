#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");
var socketIo = require("socket.io");

/**
 * Get ports from environment and store in Express.
 */

var apiPort = normalizePort(process.env.API_PORT || "3025");
var wsPort = normalizePort(process.env.WEBSOCKET_PORT || "3026");
app.set("port", apiPort);

/**
 * Create HTTP servers.
 */

var apiServer = http.createServer(app);
var wsServer = http.createServer();

/**
 * Setup Socket.IO on WebSocket server
 */
var io = socketIo(wsServer, {
  cors: {
    origin: process.env.FRONTEND_URL,
    credentials: true,
  },
});

// Import and setup socket handlers
require("../sockets/chatSocket")(io);

/**
 * Listen on provided ports, on all network interfaces.
 */

apiServer.listen(apiPort);
apiServer.on("error", onError);
apiServer.on("listening", () => onListening("API", apiPort));

wsServer.listen(wsPort);
wsServer.on("error", onError);
wsServer.on("listening", () => onListening("WebSocket", wsPort));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(serverType, port) {
  var bind = typeof port === "string" ? "pipe " + port : "port " + port;
  console.log(`${serverType} server listening on ${bind}`);
  debug(`${serverType} server listening on ${bind}`);
}
