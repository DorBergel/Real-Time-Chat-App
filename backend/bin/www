var app = require("../app");
var debug = require("debug")("backend:server");
var http = require("http");
var socketIo = require("socket.io");
const { initializeChatWebSocket } = require("../sockets/chatSocket");

console.log("Starting server initialization...");
console.log("Environment variables:");
console.log(`  - NODE_ENV: ${process.env.NODE_ENV || "development"}`);
console.log(`  - PORT: ${process.env.PORT || "not set"}`);
console.log(`  - FRONTEND_URL: ${process.env.FRONTEND_URL || "not set"}`);

// Get port from environment
var port = normalizePort(process.env.PORT || "3025");
app.set("port", port);

console.log(`Normalized port: ${port}`);

// Create HTTP server
var server = http.createServer(app);
console.log("HTTP server created");

// Initialize WebSocket
try {
  initializeChatWebSocket(server);
  console.log("Chat WebSocket initialized successfully");
} catch (error) {
  console.error("Error initializing WebSocket:", error.message);
}

// Listen on provided port
console.log(`Attempting to start server on port ${port}...`);
server.listen(port);
server.on("error", onError);
server.on("listening", () => onListening("API & WebSocket", port));

function normalizePort(val) {
  console.log(`Normalizing port value: ${val}`);
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    console.log("Using named pipe:", val);
    return val;
  }

  if (port >= 0) {
    console.log("Using port number:", port);
    return port;
  }

  console.log("Invalid port value, returning false");
  return false;
}

function onError(error) {
  console.error("Server error occurred:", error);

  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  console.error(`Error binding to ${bind}`);

  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening(serverType, port) {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log(`${serverType} server listening on ${bind}`);
  console.log(`Server ready at: http://localhost:${addr.port}`);
  debug(`${serverType} server listening on ${bind}`);
}
